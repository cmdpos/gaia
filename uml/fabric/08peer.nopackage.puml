@startuml


interface Peer  {
	GetPeerEndpoint() (*pb.PeerEndpoint, error)
	ExecuteTransaction(transaction *pb.Transaction) *pb.Response
	SecurityAccessor
	GetNeighbour() (Neighbour, error)
	GetStreamStub(string) *pb.StreamStub
}
SecurityAccessor <|-- Peer


interface Neighbour  {
	Broadcast(*pb.Message, pb.PeerEndpoint_Type) []error
	Unicast(*pb.Message, *pb.PeerID) error
	GetPeers() (*pb.PeersMessage, error)
	GetRemoteLedger(receiver *pb.PeerID) (RemoteLedger, error)
	GetDiscoverer() (Discoverer, error)
}


interface RemoteLedger  {
	BlocksRetriever
	StateRetriever
}


interface ChatStream  {
	Send(*pb.Message) error
	Recv() (*pb.Message, error)
	Context() context.Context
}

interface SecurityAccessor  {
	GetSecHelper() crypto.Peer
}

interface LegacyMessageHandler  {
	HandleMessage(msg *pb.Message) error
}

interface MessageHandler  {
	RemoteLedger
	LegacyMessageHandler
	SendMessage(msg *pb.Message) error
	To() (pb.PeerEndpoint, error)
	Stop() error
}
RemoteLedger <|-- MessageHandler
LegacyMessageHandler <|-- MessageHandler
handlerMap *--> MessageHandler


interface SecurityAccessor  {
	GetSecHelper() crypto.Peer
}

interface TransactionProccesor  {
	ProcessTransactionMsg(*pb.Message, *pb.Transaction) *pb.Response
}

interface Engine  {
	TransactionProccesor
	HandlerFactory(MessageHandler) (LegacyMessageHandler, error)
}
TransactionProccesor <|-- Engine
Engine <|-- help.EngineImpl

class help.EngineImpl {
	consenter    consensus.Consenter
	helper       *Helper
	peerEndpoint *pb.PeerEndpoint
	consensusFan *util.MessageFan
}
help.EngineImpl o--> consensus.Consenter

consensus.Consenter <|-- noops.Noops
consensus.Consenter <|-- pbft.obcBatch
pbft.obcBatch <|-- pbft.pbftCore


class Impl {
	handlerMap    *handlerMap
	gossipStub    *pb.StreamStub
	random        *rand.Rand
	secHelper     crypto.Peer
	engine        Engine
	reconnectOnce sync.Once
	discHelper    discovery.Discovery
}

Impl o--> protos.StreamStub
Impl o--> handlerMap
Impl *--> Engine
Peer <|-- Impl
Neighbour <|-- Impl

protos.StreamStub *--> protos.shandlerMap
protos.shandlerMap *--> protos.StreamHandler


class Handler  {
	ToPeerEndpoint                *pb.PeerEndpoint
	Coordinator                   *Impl
	ChatStream                    ChatStream
	doneChan                      chan struct{}
	FSM                           *fsm.FSM
	syncBlocks                    chan *pb.SyncBlocks
	snapshotRequestHandler        *syncStateSnapshotRequestHandler
	syncStateDeltasRequestHandler *syncStateDeltasHandler
	syncBlocksRequestHandler      *syncBlocksRequestHandler
	ledger                        *ledger.Ledger
}
Handler *--> ChatStream
Handler o--> Impl
Handler --|> MessageHandler
Handler o--> ledger.Ledger

@enduml


interface BlocksRetriever  {
	RequestBlocks(*pb.SyncBlockRange) (<-chan *pb.SyncBlocks, error)
}

interface StateRetriever  {
	RequestStateSnapshot() (<-chan *pb.SyncStateSnapshot, error)
	RequestStateDeltas(syncBlockRange *pb.SyncBlockRange)
}

Handler o--> ledger.Ledger

BlocksRetriever <|-- RemoteLedger
StateRetriever <|-- RemoteLedger

Handler o--> syncStateSnapshotRequestHandler
Handler o--> syncStateDeltasHandler
Handler o--> syncBlocksRequestHandler