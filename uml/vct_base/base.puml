@startuml



interface core.consensusCore  {
	SetMinerCred(crypto.Signer) error
	DoManualMining(context.Context) error
	DoMining() error
	StopMining()
}

class framework.ConsensusBase {
PurposeEntry() chan<- PurposeTask
MakeScheme(ne *node.NodeEngine, ccname string)
BuildBasePurposerRoutine() DoPurpose
MainRoutine(ctx context.Context, learner LedgerLearner)
}
class core.coreImpl


framework.ConsensusBase <|-- core.coreImpl
core.consensusCore <|-- core.coreImpl

@enduml



interface ConsensusPurposer  {
	RequireState() bool
	Purpose(*cspb.PurposeBlock) *cspb.ConsensusPurpose
	Cancel()
}



interface ConsensusTxDeliver  {
	Send(context.Context, []*pb.Transaction) error
}



TransactionProccesor <|-- Engine
Engine <|-- help.EngineImpl

class Impl {
	handlerFactory HandlerFactory
	handlerMap     *handlerMap
	ledgerWrapper  *ledgerWrapper
	secHelper      crypto.Peer
	engine         Engine
	reconnectOnce  sync.Once
	discHelper     discovery.Discovery
}
MessageHandlerCoordinator <|-- Impl
Impl o--> ledgerWrapper
Impl o--> handlerMap
Impl *--> Engine

